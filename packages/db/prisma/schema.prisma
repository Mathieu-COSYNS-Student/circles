// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
    output   = "."
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Network {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    name          String          @unique
    pictureUrl    String?
    members       NetworkMember[]
    NetwortInvite NetworkInvite[]
}

model NetworkMember {
    id            String              @id @default(auto()) @map("_id") @db.ObjectId
    userId        String
    networkId     String              @db.ObjectId
    network       Network             @relation(fields: [networkId], references: [id])
    role          NetworkMemberRole   @default(USER)
    status        NetworkMemberStatus
    NetworkInvite NetworkInvite[] // array contains one or no element: Check NetworkInvite networkMemberId comment

    @@unique([userId, networkId])
}

enum NetworkMemberStatus {
    INVITED
    JOINED
}

enum NetworkMemberRole {
    USER
    ADMIN
    OWNER
}

model NetworkInvite {
    id              String         @id @default(auto()) @map("_id") @db.ObjectId
    networkId       String         @db.ObjectId
    network         Network        @relation(fields: [networkId], references: [id])
    code            Int
    expireAt        DateTime
    used            Boolean        @default(false)
    networkMember   NetworkMember? @relation(fields: [networkMemberId], references: [id])
    networkMemberId String?        @db.ObjectId // should be unique be not supported by primsa yet https://github.com/prisma/prisma/issues/6974
    // partial index over {"networkMemberId":1} with options { unique: true, partialFilterExpression: { networkMemberId: { $type: "string" } } }

    @@unique([code, networkId])
}

model Circle {
    id         String         @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    pictureUrl String?
    chatId     String         @unique
    members    CircleMember[]
}

model CircleMember {
    id       String             @id @default(auto()) @map("_id") @db.ObjectId
    userId   String
    circleId String             @db.ObjectId
    circle   Circle             @relation(fields: [circleId], references: [id])
    role     CircleMemberRole   @default(USER)
    status   CircleMemberStatus

    @@unique([userId, circleId])
}

enum CircleMemberStatus {
    INVITED
    JOINED
}

enum CircleMemberRole {
    USER
    ADMIN
}
