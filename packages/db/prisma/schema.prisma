// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
    output   = "."
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Network {
    id         String          @id @default(auto()) @map("_id") @db.ObjectId
    name       String          @unique
    pictureUrl String?
    owner      String          @unique
    members    NetworkMember[]
    invites    NetworkInvite[]
    roles      NetworkRole[]
    circles    Circle[]
}

model NetworkMember {
    id           String                       @id @default(auto()) @map("_id") @db.ObjectId
    userId       String
    networkId    String                       @db.ObjectId
    network      Network                      @relation(fields: [networkId], references: [id])
    status       NetworkMemberStatus
    invite       NetworkInvite[] // array contains one or no element: Check NetworkInvite networkMemberId comment
    roles        NetworkMemberToNetworkRole[]
    CircleMember CircleMember[]

    @@unique([userId, networkId])
}

enum NetworkMemberStatus {
    INVITED
    JOINED
}

model NetworkInvite {
    id        String         @id @default(auto()) @map("_id") @db.ObjectId
    networkId String         @db.ObjectId
    network   Network        @relation(fields: [networkId], references: [id])
    code      Int
    expireAt  DateTime
    used      Boolean        @default(false)
    member    NetworkMember? @relation(fields: [memberId], references: [id])
    memberId  String?        @db.ObjectId // should be unique be not supported by primsa yet https://github.com/prisma/prisma/issues/6974
    // partial index over {"networkMemberId":1} with options { unique: true, partialFilterExpression: { networkMemberId: { $type: "string" } } }

    @@unique([code, networkId])
}

model NetworkMemberToNetworkRole {
    id       String        @id @default(auto()) @map("_id") @db.ObjectId
    memberId String        @db.ObjectId
    member   NetworkMember @relation(fields: [memberId], references: [id])
    roleId   String        @db.ObjectId
    role     NetworkRole   @relation(fields: [roleId], references: [id])

    @@unique([memberId, roleId])
}

model NetworkRole {
    id                String                       @id @default(auto()) @map("_id") @db.ObjectId
    name              String
    hasAllPermissions Boolean
    permissions       NetworkPermission[]
    networkId         String                       @db.ObjectId
    network           Network                      @relation(fields: [networkId], references: [id])
    members           NetworkMemberToNetworkRole[]
}

model NetworkPermission {
    id        String      @id @default(auto()) @map("_id") @db.ObjectId
    roleId    String      @db.ObjectId
    role      NetworkRole @relation(fields: [roleId], references: [id])
    resource  Resource
    action    Action
    ownership Boolean
}

enum Resource {
    NETWORK_INVITE
    NETWORK_CIRCLES
    NETWORK_MEMBERS
    NETWORK_ROLES
}

enum Action {
    CREATE
    READ
    UPDATE
    DELETE
}

model Circle {
    id         String         @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    pictureUrl String?
    networkId  String         @db.ObjectId
    network    Network        @relation(fields: [networkId], references: [id])
    chatId     String         @unique
    members    CircleMember[]
}

model CircleMember {
    id              String             @id @default(auto()) @map("_id") @db.ObjectId
    networkMemberId String             @db.ObjectId
    networkMember   NetworkMember      @relation(fields: [networkMemberId], references: [id])
    circleId        String             @db.ObjectId
    circle          Circle             @relation(fields: [circleId], references: [id])
    role            CircleMemberRole   @default(USER)
    status          CircleMemberStatus

    @@unique([networkMemberId, circleId])
    @@index([circleId])
}

enum CircleMemberStatus {
    INVITED
    JOINED
}

enum CircleMemberRole {
    USER
    ADMIN
}
